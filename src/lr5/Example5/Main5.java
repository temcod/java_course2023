package lr5.Example5;
/*Напишите программу с классом, у которого есть закрытое целочисленное
поле. Значение полю присваивается с помощью открытого метода. Методу
аргументом может передаваться целое число, а также метод может вызываться
без аргументов. Если методы вызывается без аргументов, то поле получает
нулевое значение. Если метод вызывается с целочисленным аргументом, то
это значение присваивается полю. Однако если переданное аргументом
методу значение превышает 100, то значением полю присваивается число 100.
Предусмотрите в классе конструктор, который работает по тому же принципу
что и метод для присваивания значения полю. Также в классе должен быть
метод, позволяющий проверить значение поля.*/

import lr5.Example4.Main4;

public class Main5 {
    private int number;
    //Значение полю присваивается с помощью открытого метода.
    public void Set(int n) {
        System.out.println("Метод c аргументом");
        number = n;
        //если переданное аргументом методу значение превышает 100, то значением полю присваивается число 100.
        if (n >= 100){
            number = 100;
        }
        //если переданное аргументом методу значение меньше 0, то значением полю присваивается число 0.
        if (n<=0){
            number = 0;
        }
    }
    //Если методы вызывается без аргументов, то поле получает нулевое значение.
    public void Set() {
        System.out.println("Метод без аргумента");
        number = 0;
    }
    //метод, позволяющий проверить значение поля.
    public int PrintInt() {
        return number;
    }
    //конструктор, который работает по тому же принципу что и метод для присваивания значения полю.
    Main5(int int1){
        System.out.println("конструктор");
        this.Set(int1);
    }
}
